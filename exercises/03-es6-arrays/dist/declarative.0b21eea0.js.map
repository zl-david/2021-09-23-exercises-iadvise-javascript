{"version":3,"sources":["declarative.js"],"names":["flatten","arrays","console","log","loop","value","testFn","updateFn","bodyFn","n","every","array","test"],"mappings":"AAAA;AAEA;AAEE;AACF;AACA;AACA;AACA;AACA;AAPA,MASWA,OATX,GASE,SAASA,OAAT,CAAiBC,MAAjB,EAAyB,CACvB;AACD,GAXH;;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAYAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAAC,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAD,EAAI,CAAJ,CAAZ,EAAoB,CAAC,CAAD,CAApB,CAAD,CAAnB,EAbF,CAcE;AACD;AAED;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AATA,MAWWI,IAXX,GAWE,SAASA,IAAT,CAAcC,KAAd,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C,CAAE,CAXnD;;AACEN,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAYAC,EAAAA,IAAI,CAAC,CAAD,EAAI,UAAAK,CAAC;AAAA,WAAIA,CAAC,GAAG,CAAR;AAAA,GAAL,EAAgB,UAAAA,CAAC;AAAA,WAAIA,CAAC,GAAG,CAAR;AAAA,GAAjB,EAA4BP,OAAO,CAACC,GAApC,CAAJ,CAbF,CAcE;AACA;AACA;AACD;AAED;AAGE;AACF;AACA;AACA;AANA,MAOWO,KAPX,GAOE,SAASA,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B,CAC1B;AACD,GATH;;AACEV,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAUAD,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,UAAAD,CAAC;AAAA,WAAIA,CAAC,GAAG,EAAR;AAAA,GAAb,CAAjB,EAXF,CAYE;;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAD,EAAa,UAAAD,CAAC;AAAA,WAAIA,CAAC,GAAG,EAAR;AAAA,GAAd,CAAjB,EAbF,CAcE;;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,CAAC,EAAD,EAAK,UAAAD,CAAC;AAAA,WAAIA,CAAC,GAAG,EAAR;AAAA,GAAN,CAAjB,EAfF,CAgBE;AACD","file":"declarative.0b21eea0.js","sourceRoot":"../src","sourcesContent":["// Exercises from https://eloquentjavascript.net/05_higher_order.html\n\n{\n  console.log(\"--- FLATTEN ---\");\n  /*\n   * Use the reduce method in combination with the\n   * concat method to “flatten” an array of arrays\n   * into a single array that has all the elements\n   * of the original arrays.\n   */\n\n  function flatten(arrays) {\n    // Your code here.\n  }\n\n  console.log(flatten([[1, 2, 3], [4, 5], [6]]));\n  // → [1, 2, 3, 4, 5, 6]\n}\n\n{\n  console.log(\"--- LOOP ---\");\n\n  /*\n   * Write a higher-order function loop.\n   * It takes a value, a test function, an update function, and a body function.\n   * Each iteration, it first runs the test function on the current loop value and stops if that returns false.\n   * Then it calls the body function, giving it the current value.\n   * Finally, it calls the update function to create a new value and starts from the beginning.\n   */\n\n  function loop(value, testFn, updateFn, bodyFn) {}\n\n  loop(3, n => n > 0, n => n - 1, console.log);\n  // → 3\n  // → 2\n  // → 1\n}\n\n{\n  console.log(\"--- EVERY ---\");\n\n  /*\n   * returns true when the given function returns true for every element in the array.\n   * Implement \"every\" as a function that takes an array and a predicate function as parameters.\n   */\n  function every(array, test) {\n    // Your code here.\n  }\n\n  console.log(every([1, 3, 5], n => n < 10));\n  // → true\n  console.log(every([2, 4, 16], n => n < 10));\n  // → false\n  console.log(every([], n => n < 10));\n  // → true\n}\n"]}