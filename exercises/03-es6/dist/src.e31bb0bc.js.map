{"version":3,"sources":["01_var_let_const.js","index.js"],"names":["exercise1","fruit","exercise2","i","exercise3","exercise4","constNum","increaseConstNum","exercise5","banana","color","exercise6","callbacks","push","exercise7"],"mappings":";;ACAA;;AAEA;;;;;;;;;ADFA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,GAAqB;AAC1B,MAAIC,KAAK,GAAG,QAAZ;;AAEA,MAAI,IAAJ,EAAU;AACR,QAAIA,KAAK,GAAG,MAAZ;AACD;;AAED,SAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,SAAT,GAAqB;AAC1B,OAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,EAApB,EAAwBA,EAAC,EAAzB,EAA6B,CAC5B;;AAED,SAAOA,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,SAAT,GAAqB;AAC1B,MAAI,IAAJ,EAAU;AACR,QAAIH,MAAK,GAAG,MAAZ;AACD;;AAED,SAAOA,KAAP;AACD,EAGD;;AAEA;AACA;AACA;AACA;AACA;;;AACO,SAASI,SAAT,GAAqB;AAC1B,MAAIC,QAAQ,GAAG,CAAf;;AAEA,WAASC,gBAAT,GAA4B;AAC1BD,IAAAA,QAAQ,GAAG,CAAX;AACD;;AAED,SAAOC,gBAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,SAAT,GAAqB;AAC1B,MAAMC,MAAM,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAf,CAD0B,CACU;;AAEpC,SAAOD,MAAM,CAACC,KAAd;AACD,EAGD;;AAEA;AACA;AACA;;;AACO,SAASC,SAAT,GAAqB;AAC1B,MAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BS,IAAAA,SAAS,CAACC,IAAV,CAAe,YAAY;AACzB,aAAOV,CAAP;AACD,KAFD;AAGD;;AAED,SAAOS,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASE,SAAT,GAAqB;AAC1B,MAAMb,KAAK,GAAG,CAAC,MAAD,EAAS,QAAT,CAAd,CAD0B,CACQ;;AAElC,SAAOA,KAAK,CAAC,CAAD,CAAZ;AACD","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["// to do: Replace var/let/const with the correct var/let/const to fix the unit tests\n\n// 01.1: var or let\n\n/*\n * Remember: \"let\" is block scoped. \"var\" isn't.\n * Fruit \"banana\" gets overwritten by \"pear\", we don't want that! \n * Make this code more robust, by changing 1 \"var\" to \"let\".\n */\nexport function exercise1() {\n  var fruit = \"banana\";\n\n  if (true) {\n    var fruit = \"pear\";\n  }\n\n  return fruit;\n}\n\n/*\n * Remember: \"let\" is block scoped.\n * How can we return the value of \"i\"? \n * Currently \"i\" lives only in the scope of the for-loop\n */\nexport function exercise2() {\n  for (let i = 0; i < 10; i++) {\n  }\n\n  return i;\n}\n\n/*\n * Remember: \"let\" is block scoped.\n * How can we return the value of \"fruit\"? \n */ \nexport function exercise3() {\n  if (true) {\n    let fruit = \"pear\";\n  }\n\n  return fruit;\n}\n\n\n// 01.2: var or const\n\n/*\n * Using \"var\" is discouraged: it makes it possible to change a variable in another function,\n * leading to unexpected bugs.\n * Improve this code by using const.\n */\nexport function exercise4() {\n  var constNum = 0;\n\n  function increaseConstNum() {\n    constNum = 1;\n  }\n\n  return increaseConstNum;\n}\n\n/*\n * Using \"const\" doesn't mean you can't change an object's property after it has been set.\n * \"const\" only prevents you from assigning the variable to another value.\n * You can test this changing the color to \"black\" after it has been assigned to yellow.\n */\nexport function exercise5() {\n  const banana = { color: \"yellow\" }; // ← Don't change this line\n\n  return banana.color;\n}\n\n\n// 01.3: Extra\n\n/*\n * Change \"var\" to \"let\", and see how it impacts the value of \"i\" inside the callbacks.\n */\nexport function exercise6() {\n  const callbacks = [];\n\n  for (var i = 0; i < 10; i++) {\n    callbacks.push(function () {\n      return i;\n    });\n  }\n\n  return callbacks;\n}\n\n/*\n * The unit test expects the second item to be an apple, not a banana.\n * \"fruit\" is a const, but it doesn't mean you can't change items in the array.\n * Replace the \"banana\" with an \"apple\"\n */\nexport function exercise7() {\n  const fruit = [\"kiwi\", \"banana\"]; // ← Don't change this line\n\n  return fruit[1];\n}","import { exercise1 } from \"./01_var_let_const\";\n\nexercise1();"]}